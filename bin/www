#!/usr/bin/env node
var chalk = require('chalk');
console.info(chalk.keyword('orange').italic('EXPRESS FLOW ROBOT: into www'));

var environment = process.env.NODE_ENV.replace(/(^\s*)|(\s*$)/g, '');
console.log('===============================================================check NODE_ENV');
console.log('running NODE_ENV: ', environment);

/**
 * Module dependencies.
 */

var app = require('../app');
console.info(chalk.keyword('orange').italic('EXPRESS FLOW ROBOT: nextfrom app.js'));
var debug = require('debug')('weekend:server');
var http = require('http');

const webpackDevServer = require('webpack-dev-server');
const webpack = require('webpack');
const config = require('../webpack.config.dev.js');
const options = {
  contentBase: '../public/javascripts/build',
  hot: true,
  host: 'localhost'
};
webpackDevServer.addDevServerEntrypoints(config, options);
const compiler = webpack(config);

/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3009');
// app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);
const server = new webpackDevServer(compiler, options);
/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

server.listen(5009, 'localhost', () => {
  console.log('dev server listening on port 5009');
});

/**
 * Normalize a port into a number, string, or false.
 */

// function normalizePort(val) {
//   var port = parseInt(val, 10);

//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }

//   if (port >= 0) {
//     // port number
//     return port;
//   }

//   return false;
// }

/**
 * Event listener for HTTP server "error" event.
 */

// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }

//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;

//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }

/**
 * Event listener for HTTP server "listening" event.
 */

// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
console.info(chalk.keyword('orange').italic('EXPRESS FLOW ROBOT: endof www'));
